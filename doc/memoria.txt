Autores:
  - Víctor Nieves Sánchez, x150375
  - Daniel Morgera Pérez, x150284
  - Alejandro Carmona Ayllón, x150151

Aclaraciones y concesiones:
En nuestro programa se considera poder tener piezas con atributos 0, por ejemplo pieza(0,0,0,a). Donde al ser 0 un número natural y
el color uno valido, se acepta como pieza.

% --------------------- Auxiliares ----------------------  
menorIgual/2 Indica si el primer argumento es menor o igual que el segundo.

compPiezas/2 Compara si la pieza1 es menor que la pieza2 en anchura y profundidad.

tamanio/2 Compara si la lista (primer argumento) tiene el tamaño del segundo argumento.

concatenar/3 Dice si la lista de tercer argumento es la concatenación del primer y el segundo argumento.

**Nota**: Estas no se han probado, ya que se probaban indirectamente en los principales.

% --------------------- Principales ----------------------
esTorre/1 predicado que se verifica si se cumplen las condiciones para ser una torre.
	Pruebas:
		1- esTorre([pieza(s(0),s(0),s(0),a)]).
			yes
		2- esTorre(pieza(s(0),s(0),s(0),a)).
			no
		3- esTorre([pieza(s(0),s(0),s(0),a),pieza(s(0),s(0),s(0),r)]).
			yes

alturaTorre/2 predicado que verifica si el primer argumento es una torre, y el segundo argumento es la altura de la torre.
	Pruebas:
		1- alturaTorre([pieza(s(0),s(0),s(0),a), pieza(s(0),s(s(0)),s(0),a), pieza(s(0),0,s(0),a)], s(s(s(0)))).
			yes
		2- alturaTorre([pieza(s(0),s(0),s(0),a), pieza(s(0),s(s(0)),s(0),a), pieza(s(0),0,s(0),a)], 0).
			no
		3- alturaTorre([pieza(s(0),s(0),s(0),a), pieza(s(0),s(s(0)),s(0),a), pieza(s(0),s(0),s(0),a)], s(s(s(s(0))))).
			yes

coloresTorre/2 verifica si el primer argumento es una torre y el segundo argumento es una lista con los colores de la torre.
**Nota**: Este predicado llama a coloresTorre_. Se hace así para comprobar una sola vez que el primer argumento es una torre, y no hacerlo todas las llamadas.
	Pruebas:
		1- coloresTorre([pieza(s(s(0)),s(0),s(s(0)),r),pieza(s(s(0)),s(s(0)),s(s(0)),r),pieza(s(s(0)),s(s(0)),s(s(0)),r)],[r,r,r]).
			yes
		2- coloresTorre([pieza(s(s(0)),s(0),s(s(0)),r),pieza(s(s(0)),s(s(0)),s(s(0)),r),pieza(s(s(0)),s(s(0)),s(s(0)),r)],[a]).
			no
		3- coloresTorre([pieza(s(s(0)),s(0),s(s(0)),r),pieza(s(s(0)),s(s(0)),s(s(0)),r),pieza(s(s(0)),s(s(0)),s(s(0)),r)],[a,a,a]).
			no

coloresTorre_/2 es el que realiza la lista de colroes.
	No se ha probado, ya que se probaba con la llamada a coloresTorre/2.


cloresIncluidos/2 predicado que verifica si los argumentos son torres y que todos los colores de la lista 1 también están en los de la lista 2.
	Pruebas:
		1- coloresIncluidos([pieza(s(0),s(0),s(0),a)],[pieza(s(0),s(0),s(0),v),pieza(s(0),s(0),s(s(0)),a)]).
			yes

		2- coloresIncluidos([pieza(s(s(0)),s(s(0)),s(s(0)),a)],[pieza(s(s(0)),s(s(0)),s(s(0)),v)]).
			no
		3- coloresIncluidos([pieza(s(s(0)),s(s(s(s(0)))),s(s(s(s(0)))),a),pieza(s(s(0)),s(s(s(s(0)))),s(s(s(s(0)))),r)],[pieza(s(0),s(s(0)),s(s(s(0))),v),pieza(s(s(s(0))),s(s(s(0))),s(s(s(0))),a),pieza(s(s(s(s(0)))),s(s(s(0))),s(s(s(s(s(0))))),r)]).
			yes

coloresIncluidos_/2 compara las listas de colores, e indica si los colores de una estan incluidas en la otra
	No se ha probado, ya que se probaba con la llamada a coloresIncluidos/2.
